
//MWChess version 1.0
//Definitions:

(define "IsSurroundingAtTo"
    (>=
        (count Sites
            in:(intersection
                (sites Around (to))
                (union
                    {
                        (sites Occupied by:Mover)
                    }
                )
            )
        )
        2
    )
)

(define "IsPolyThreating"
    (can Move (do (forEach Piece Mover) ifAfterwards:("IsPolyWin" Mover)))
)

(define "IsPolyThreatened"
    (can Move (do (forEach Piece Next) ifAfterwards:("IsPolyWin" Next)))
)

(define "IsPolyWin"
    (and
            (= (what at:(last To)) (id "Queen" #1))
            (is In (last To) (sites #1 "WinZone"))
    )
)

(define "LegalDeploymentZone"
    (union
        {
            (if (= (what at:0) (id "Rook" Mover))
                (union
                    (sites Row (row of:0))
                    (sites Column (column of:0))
                )
            )
            (if (= (what at:1) (id "Rook" Mover))
                (union
                    (sites Row (row of:1))
                    (sites Column (column of:1))
                )
            )
            (if (= (what at:2) (id "Rook" Mover))
                            (union
                                (sites Row (row of:2))
                                (sites Column (column of:2))
                            )
                        )
            (if (= (what at:3) (id "Rook" Mover))
                            (union
                                (sites Row (row of:3))
                                (sites Column (column of:3))
                            )
                        )
            (if (= (what at:4) (id "Rook" Mover))
                            (union
                                (sites Row (row of:4))
                                (sites Column (column of:4))
                            )
                        )
            (if (= (what at:5) (id "Rook" Mover))
                            (union
                                (sites Row (row of:5))
                                (sites Column (column of:5))
                            )
                        )
            (if (= (what at:6) (id "Rook" Mover))
                            (union
                                (sites Row (row of:6))
                                (sites Column (column of:6))
                            )
                        )
            (if (= (what at:7) (id "Rook" Mover))
                            (union
                                (sites Row (row of:7))
                                (sites Column (column of:7))
                            )
                        )
            (if (= (what at:8) (id "Rook" Mover))
                            (union
                                (sites Row (row of:8))
                                (sites Column (column of:8))
                            )
                        )
            (if (= (what at:9) (id "Rook" Mover))
                            (union
                                (sites Row (row of:9))
                                (sites Column (column of:9))
                            )
                        )
            (if (= (what at:10) (id "Rook" Mover))
                            (union
                                (sites Row (row of:10))
                                (sites Column (column of:10))
                            )
                        )
            (if (= (what at:11) (id "Rook" Mover))
                            (union
                                (sites Row (row of:11))
                                (sites Column (column of:11))
                            )
                        )
            (if (= (what at:12) (id "Rook" Mover))
                            (union
                                (sites Row (row of:12))
                                (sites Column (column of:12))
                            )
                        )
            (if (= (what at:13) (id "Rook" Mover))
                            (union
                                (sites Row (row of:13))
                                (sites Column (column of:13))
                            )
                        )
            (if (= (what at:14) (id "Rook" Mover))
                            (union
                                (sites Row (row of:14))
                                (sites Column (column of:14))
                            )
                        )
            (if (= (what at:15) (id "Rook" Mover))
                (union
                    (sites Row (row of:15))
                    (sites Column (column of:15))
                )
            )
            (if (= (what at:16) (id "Rook" Mover))
                (union
                    (sites Row (row of:16))
                    (sites Column (column of:16))
                )
            )
            (if (= (what at:17) (id "Rook" Mover))
                            (union
                                (sites Row (row of:17))
                                (sites Column (column of:17))
                            )
                        )
            (if (= (what at:18) (id "Rook" Mover))
                            (union
                                (sites Row (row of:18))
                                (sites Column (column of:18))
                            )
                        )
            (if (= (what at:19) (id "Rook" Mover))
                            (union
                                (sites Row (row of:19))
                                (sites Column (column of:19))
                            )
                        )
            (if (= (what at:20) (id "Rook" Mover))
                            (union
                                (sites Row (row of:20))
                                (sites Column (column of:20))
                            )
                        )
            (if (= (what at:21) (id "Rook" Mover))
                            (union
                                (sites Row (row of:21))
                                (sites Column (column of:21))
                            )
                        )
            (if (= (what at:22) (id "Rook" Mover))
                            (union
                                (sites Row (row of:22))
                                (sites Column (column of:22))
                            )
                        )
            (if (= (what at:23) (id "Rook" Mover))
                            (union
                                (sites Row (row of:23))
                                (sites Column (column of:23))
                            )
                        )
            (if (= (what at:24) (id "Rook" Mover))
                            (union
                                (sites Row (row of:24))
                                (sites Column (column of:24))
                            )
                        )
            (if (= (what at:25) (id "Rook" Mover))
                            (union
                                (sites Row (row of:25))
                                (sites Column (column of:25))
                            )
                        )
            (if (= (what at:26) (id "Rook" Mover))
                            (union
                                (sites Row (row of:26))
                                (sites Column (column of:26))
                            )
                        )
            (if (= (what at:27) (id "Rook" Mover))
                            (union
                                (sites Row (row of:27))
                                (sites Column (column of:27))
                            )
                        )
            (if (= (what at:28) (id "Rook" Mover))
                            (union
                                (sites Row (row of:28))
                                (sites Column (column of:28))
                            )
                        )
            (if (= (what at:29) (id "Rook" Mover))
                            (union
                                (sites Row (row of:29))
                                (sites Column (column of:29))
                            )
                        )
            (if (= (what at:30) (id "Rook" Mover))
                            (union
                                (sites Row (row of:30))
                                (sites Column (column of:30))
                            )
                        )
            (if (= (what at:31) (id "Rook" Mover))
                            (union
                                (sites Row (row of:31))
                                (sites Column (column of:31))
                            )
                        )
            (if (= (what at:32) (id "Rook" Mover))
                (union
                    (sites Row (row of:32))
                    (sites Column (column of:32))
                )
            )
            (if (= (what at:33) (id "Rook" Mover))
                (union
                    (sites Row (row of:33))
                    (sites Column (column of:33))
                )
            )
            (if (= (what at:34) (id "Rook" Mover))
                            (union
                                (sites Row (row of:34))
                                (sites Column (column of:34))
                            )
                        )
            (if (= (what at:35) (id "Rook" Mover))
                            (union
                                (sites Row (row of:35))
                                (sites Column (column of:35))
                            )
                        )
            (if (= (what at:36) (id "Rook" Mover))
                            (union
                                (sites Row (row of:36))
                                (sites Column (column of:36))
                            )
                        )
            (if (= (what at:37) (id "Rook" Mover))
                            (union
                                (sites Row (row of:37))
                                (sites Column (column of:37))
                            )
                        )
            (if (= (what at:38) (id "Rook" Mover))
                            (union
                                (sites Row (row of:38))
                                (sites Column (column of:38))
                            )
                        )
            (if (= (what at:39) (id "Rook" Mover))
                            (union
                                (sites Row (row of:39))
                                (sites Column (column of:39))
                            )
                        )
            (if (= (what at:40) (id "Rook" Mover))
                            (union
                                (sites Row (row of:40))
                                (sites Column (column of:40))
                            )
                        )
            (if (= (what at:41) (id "Rook" Mover))
                            (union
                                (sites Row (row of:41))
                                (sites Column (column of:41))
                            )
                        )
            (if (= (what at:42) (id "Rook" Mover))
                            (union
                                (sites Row (row of:42))
                                (sites Column (column of:42))
                            )
                        )
            (if (= (what at:43) (id "Rook" Mover))
                            (union
                                (sites Row (row of:43))
                                (sites Column (column of:43))
                            )
                        )
            (if (= (what at:44) (id "Rook" Mover))
                            (union
                                (sites Row (row of:44))
                                (sites Column (column of:44))
                            )
                        )
            (if (= (what at:45) (id "Rook" Mover))
                            (union
                                (sites Row (row of:45))
                                (sites Column (column of:45))
                            )
                        )
            (if (= (what at:46) (id "Rook" Mover))
                            (union
                                (sites Row (row of:46))
                                (sites Column (column of:46))
                            )
                        )
            (if (= (what at:47) (id "Rook" Mover))
                            (union
                                (sites Row (row of:47))
                                (sites Column (column of:47))
                            )
                        )
            (if (= (what at:48) (id "Rook" Mover))
                            (union
                                (sites Row (row of:48))
                                (sites Column (column of:48))
                            )
                        )
            (if (= (what at:49) (id "Rook" Mover))
                            (union
                                (sites Row (row of:49))
                                (sites Column (column of:49))
                            )
                        )
            (if (= (what at:50) (id "Rook" Mover))
                            (union
                                (sites Row (row of:50))
                                (sites Column (column of:50))
                            )
                        )
            (if (= (what at:51) (id "Rook" Mover))
                            (union
                                (sites Row (row of:51))
                                (sites Column (column of:51))
                            )
                        )
            (if (= (what at:52) (id "Rook" Mover))
                            (union
                                (sites Row (row of:52))
                                (sites Column (column of:52))
                            )
                        )
            (if (= (what at:53) (id "Rook" Mover))
                            (union
                                (sites Row (row of:53))
                                (sites Column (column of:53))
                            )
                        )
            (if (= (what at:54) (id "Rook" Mover))
                            (union
                                (sites Row (row of:54))
                                (sites Column (column of:54))
                            )
                        )
            (if (= (what at:55) (id "Rook" Mover))
                            (union
                                (sites Row (row of:55))
                                (sites Column (column of:55))
                            )
                        )
            (if (= (what at:56) (id "Rook" Mover))
                            (union
                                (sites Row (row of:56))
                                (sites Column (column of:56))
                            )
                        )
            (if (= (what at:57) (id "Rook" Mover))
                            (union
                                (sites Row (row of:57))
                                (sites Column (column of:57))
                            )
                        )
            (if (= (what at:58) (id "Rook" Mover))
                            (union
                                (sites Row (row of:58))
                                (sites Column (column of:58))
                            )
                        )
            (if (= (what at:59) (id "Rook" Mover))
                            (union
                                (sites Row (row of:59))
                                (sites Column (column of:59))
                            )
                        )
            (if (= (what at:60) (id "Rook" Mover))
                            (union
                                (sites Row (row of:60))
                                (sites Column (column of:60))
                            )
                        )
            (if (= (what at:61) (id "Rook" Mover))
                            (union
                                (sites Row (row of:61))
                                (sites Column (column of:61))
                            )
                        )
            (if (= (what at:62) (id "Rook" Mover))
                            (union
                                (sites Row (row of:62))
                                (sites Column (column of:62))
                            )
                        )
            (if (= (what at:63) (id "Rook" Mover))
                            (union
                                (sites Row (row of:63))
                                (sites Column (column of:63))
                            )
                        )
        }
    )
)

(define "InitialPawnMove"
    (if (is In (from) (sites Start (piece (what at:(from)))))
        ("DoubleStepForwardsToEmpty")
    )
)

(define "DoubleStepForwardsToEmpty"
    (move Slide
        (directions {Forwards Rightward Leftward})
        (between (exact 2) if:(is Empty (between)))
        (then (set Counter))
    )
)

//------------------------------------------------------------------------------

(game "MWChess"
    ("TwoPlayersNorthSouth")
    (equipment {
        (board (square 8))
        (regions "WinZone" P1 (sites Top))
        (regions "WinZone" P2 (sites Bottom))

        ("ChessRook" "Knight" (then (set Counter)))

        (piece "King" Each
            (move
                Step
                (to
                    if:
                    (and
                        {
                            (not ("IsFriendAt" (to)))
                            (not (= (what at:(to)) (id "Bishop" Next)))
                            (not (and (= (what at:(to)) (id "Pawn" Next)) (not "IsSurroundingAtTo")))
                        }
                    )
                    (apply
                        (if ("IsEnemyAt" (to))
                            (remove
                                (to)
                            )
                        )
                    )
                )
                (then (set Counter))
            )
        )

        (piece "Queen" Each
            (move
                Slide
                (between if:(is Empty (between)))
                (then (set Counter))
            )
        )

        (piece "Rook" Each
            (move
                Slide
                Diagonal
                (between if:(is Empty (between)))
                (then (set Counter))
            )
        )

        (piece "Pawn" Each
            (or {
                    (move Step
                        (directions {Forwards Rightward Leftward})
                        (to
                            if:
                                (and
                                    {
                                        (not ("IsFriendAt" (to)))
                                        (not (= (what at:(to)) (id "Bishop" Next)))
                                        (not (and (= (what at:(to)) (id "Pawn" Next)) (not "IsSurroundingAtTo")))
                                    }
                                )
                                (apply (remove (to)))
                        )
                        (then (set Counter))
                    )
                    "InitialPawnMove"
                }
            )
        )


        (piece "Bishop" Each
            (or
                (move
                    Step
                    (to
                        if: ("IsEnemyAt" (to))
                        (apply
                            (remove
                                (to)
                            )
                        )
                    )
                    (then (set Counter))
                )
                (move
                    (from)
                    (to
                        "LegalDeploymentZone"
                        if:(is Empty (to))
                    )
                    (then (set Counter))
                )
            )
        )
    })
    (rules
        (start {
            (place "Pawn1" (sites Row 1))
            (place "Pawn2" (sites Row 6))
            (place "Rook1" {"A1" "H1"}) (place "Knight1" {"B1" "G1"}) (place "Bishop1" {"C1" "F1"}) (place "Queen1" coord:"D1") (place "King1" coord:"E1")
            (place "Rook2" {"A8" "H8"}) (place "Knight2" {"B8" "G8"}) (place "Bishop2" {"C8" "F8"}) (place "Queen2" coord:"D8") (place "King2" coord:"E8")

        })

        (play
                (do
                    (forEach Piece)
                    ifAfterwards:(not ("IsInCheck" "King" Mover))
                    (then (if (or (("IsPolyThreating") ("IsPolyThreatened"))) (note "**Poly Threating !**")))
                )
        )
        (end {
            ("Checkmate" "King")
            (if (or (no Moves Mover) (= (counter) 3)) (result Mover Draw))
            (if ("IsPolyWin" Mover)
                (result Mover Win)
            )
        })
    )
)

//------------------------------------------------------------------------------

(metadata

    (info
        {
        (description "This document presents a newly designed chess variant—Modern Warfare Chess (MWChess)—which seeks to move beyond the medieval battlefield narrative traditionally associated with standard chess, and instead reflect the complexities of modern military systems and geopolitical dynamics. In this setting, players no longer assume the roles of kings or feudal commanders, but rather command modern combat units, firepower delivery systems, strategic deployments, and logistical support networks. At the same time, non-conventional elements such as political maneuvering, information control, and territorial influence are integrated into the game mechanics. MWChess is designed to be accessible even to those unfamiliar with classical chess rules, offering a standalone system that can be learned and played independently. Its core philosophy is to retain certain classical structural elements while reimagining the game through the lens of 21st-century strategic thinking. By doing so, it aims to inspire deeper reflection on the evolving nature of warfare, decision-making, and competitive interaction in modern contexts.")
        (aliases {"MWChess" "Modern Warfare Chess"})
        (rules "Played on an 8×8 board with an identical initial piece placement to classical chess.

            King:
            The king may move one square in any direction—forward, backward, sideways, or diagonally.
            If the destination square is occupied by an enemy piece, it captures that enemy piece and occupies the square.
            The king cannot be sacrificed: no move is permitted if it results in the king being in a position where it could be captured (i.e., a checked state).

            Pawn:
            A pawn may move one square in any of the following directions: forward, forward-left, forward-right, left, or right. It cannot move backward, backward-left, or backward-right.
            If the destination square is occupied by an enemy piece, it captures that enemy piece and occupies the square.
            Initial Move Rule: On its first move, A pawn may move forward by two adjacent squares in a straight line, without skipping or jumping over any square in any of the permitted directions (forward, forward-left, forward-right, left, or right). This extended move cannot be used to capture.
            Suppression Rule: A pawn may only be captured by an enemy piece when it is suppressed, meaning there are at least two enemy pieces within the eight adjacent squares surrounding the pawn.

            Rook:
            A rook may move any number of squares in a straight line along the four diagonal directions: forward-left, forward-right, backward-left, and backward-right, as long as the path is unobstructed.
            Rooks cannot capture by movement; they may only move to unoccupied squares.
            The movement of friendly Bishops depends on the position of rooks; a bishop may be moved to any square in the same rank or file as a friendly rook.

            Bishop:
            A bishop has two distinct abilities:
            It may be moved to any empty square in the same rank or file as any friendly rook.
            It may capture any enemy piece in one of the eight adjacent squares, replacing it on that square.
            Bishops cannot be captured.
            A bishop's capturing ability is not subject to the suppression requirement for pawns, nor are bishops immune to captures by bishops. For example, a bishop may capture an enemy bishop or a pawn that is not under suppression.

            Knight:
            A knight may move any number of squares in a straight line along the four orthogonal directions: forward, backward, left, or right, as long as the path is unobstructed.
            If the destination square is occupied by an enemy piece, it may capture and occupy that square.
            A knight’s capturing ability is not subject to the suppression requirement for pawns, nor are bishops immune to captures by knights. For example, a knight may capture an enemy bishop or a pawn that is not under suppression.

            Queen:
            The queen may move any number of squares in a straight line in any direction—orthogonal or diagonal—provided the path is unobstructed.
            The queen cannot capture by movement; it may only move to unoccupied squares.
            It plays a special role in the victory conditions: if a player’s queen successfully reaches any square on the opponent’s back rank (the 1st rank for White, the 8th rank for Black), that player immediately wins the game.

            Victory Conditions:

            Checkmate:
            If a player makes a move that places the opponent’s king in check, and the opponent cannot make any legal move on their next turn to remove the king from check, the player delivering the checkmate wins the game.

            PoliWin (Queen Reaches Back Rank):
            If a player’s queen successfully reaches any square on the opponent’s back rank (the 1st rank for White, the 8th rank for Black), that player immediately wins the game.

            Draw:
            A draw may be offered by one player and accepted by the other.
            If a player has no legal move and their king is not in check, the game ends in a stalemate, resulting in a draw.
            If the same position occurs three times, with the same player to move and the same possible legal moves each time, the game ends in a threefold repetition, resulting in a draw.
            If both players make 50 consecutive moves without any capture, the game ends in a draw.

            Special Notes:
            PoliWin takes lower priority than Check and Checkmate.
            Even if your next move could achieve PoliWin by moving the queen to the opponent's back rank, you must first respond to a Check if your king was checked in the opponent's previous turn. If it is Checkmate, the opponent wins immediately.
        ")
        (source "<a href=\"https://github.com/ModernWarfareChess/MWChess\" target=\"_blank\" style=\"color: #0000EE\" />MWChess GitHub Repository</a>")
        (version "1.0.0")
        (classification "board/war/replacement/checkmate/chess")
        (credit "Created by Modern Warfare Chess Project")
        (origin "This variant was designed and released in 2025.")
        }
    )

    (graphics {
        (show Check "King")
        (board Style Chess)

    })

    (ai
        (bestAgent "UBFM")
        (heuristics {
            (material transformation:(divNumInitPlacement) pieceWeights:{
                (pair "Pawn1" 2.0)
                (pair "Pawn2" 2.0)
                (pair "Rook1" 3.0)
                (pair "Rook2" 3.0)
                (pair "Bishop1" 4.0)
                (pair "Bishop2" 4.0)
                (pair "Knight1" 5.0)
                (pair "Knight2" 5.0)
                (pair "Queen1" 5.0)
                (pair "Queen2" 5.0)
            })
            (mobilityAdvanced weight:0.02)
        })
    )
)
